REST Basics

REST is resource-based architecture. A resource is accessed via a common interface
based on the HTTP standard methods. REST asks developers to use HTTP methods
explicitly and in a way that’s consistent with the protocol definition. Each resource is
identified by a URL. Every resource should support the HTTP common operations,
and REST allows that resource to have different representations, e.g., text, xml, json,
etc. The rest client can ask for specific representation via the HTTP protocol. 

When a RESTful API is called, the server will transfer to the client a representation of the state of the requested resource. States can be represented via JSON, XML, HTML etc.

Use URLs to identify what you want to work on. Use nouns to describe resources.

-----Terms
Client				Person or software that uses the REST API
Resource 			Conceptual target of a hypertext reference, e.g.,
				customer/order. Thought of as nouns
Resource Identifier 		A uniform resource locator (URL) or uniform resource
				name (URN) identifying a specific resource, e.g.,
				http://myrest.com/customer/3435
Resource Metadata 		Information describing the resource, e.g., tag, author,
				source link, alternate location, alias names
				Representation The resource content—JSON Message, HTML Document,
				JPEG Image
Representation Metadata 	Information describing how to process the representation,
				e.g., media type, last-modified time
Control Data 			Information describing how to optimize response
				processing, e.g., if-modified-since, cache-control-expiry

-----HTTP Methods
Methods are stored in the header of HTTP packet, body contains data(JSON, XML, etc) to be used.

GET 	“give me some info” (Retrieve)

POST 	“here’s some update info” (Update)

PUT 	“here’s some new info” (Create)

DELETE 	“delete some info” (Delete)

PATCH	The HTTP method PATCH can be used to update partial
	resources. For instance, when you only need to update one field of
	the resource, PUTting a complete resource representation might
	be cumbersome and utilizes more bandwidth.

HEAD 	The HEAD method is identical to the GET method,
	except that the server must not return a message body in the
	response. This method is often used for testing hypertext links for
	validity, accessibility, and recent modification.

OPTIONS This method allows the client to determine the
	options and/or requirements associated with a resource, or the
	capabilities of a server, without implying a resource action or
	initiating a resource retrieval.

-----HTTP Response Codes

200	OK: Requests was successful
201	Created: Request successful and resource was created (for PUT/POST)
400	Bad Request: Request did not pass validation or in wrong format
401	Unauthorized: Need to perform authentication to access resource
404	Not Found: Required resoource not found
405	Method Not Allowed: HTTP method is not supported for resource
409	Conflict: Ex) using PUT to create the same resource twice
500	Internal Server Error: Processing fails due to circumstances on server

